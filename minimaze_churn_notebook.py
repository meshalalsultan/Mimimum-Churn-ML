# -*- coding: utf-8 -*-
"""Minimaze churn notebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16yErjfEMepTfFQ7KSmdHqOQOjDpV0ZIS
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline 
import seaborn as sn
import pickle

data = pd.read_csv('new_churn_data.csv')

## Data Preparation
user_identifier = data['user']
data = data.drop(columns = ['user'])

data.head()

# One-Hot Encoding
data.housing.value_counts()
data.groupby('housing')['churn'].nunique().reset_index()
data = pd.get_dummies(data)
data.columns
data = data.drop(columns = ['housing_na', 'zodiac_sign_na', 'payment_type_na'])

data.head(2)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(data.drop(columns = 'churn'), data['churn'],
                                                    test_size = 0.2,
                                                    random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_X = StandardScaler()
X_train2 = pd.DataFrame(sc_X.fit_transform(X_train))
X_test2 = pd.DataFrame(sc_X.transform(X_test))
X_train2.columns = X_train.columns.values
X_test2.columns = X_test.columns.values
X_train2.index = X_train.index.values
X_test2.index = X_test.index.values
X_train = X_train2
X_test = X_test2

"""**Model Building**"""

# Fitting Model to the Training Set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

# Predicting Test Set
y_pred = classifier.predict(X_test)

# Evaluating Results
from sklearn.metrics import confusion_matrix, accuracy_score, f1_score, precision_score, recall_score
cm = confusion_matrix(y_test, y_pred)
accuracy_score(y_test, y_pred)
precision_score(y_test, y_pred) # tp / (tp + fp)
recall_score(y_test, y_pred) # tp / (tp + fn)
f1_score(y_test, y_pred)

df_cm = pd.DataFrame(cm, index = (0, 1), columns = (0, 1))
plt.figure(figsize = (10,7))
sn.set(font_scale=1.4)
sn.heatmap(df_cm, annot=True, fmt='g')
print("Test Data Accuracy: %0.4f" % accuracy_score(y_test, y_pred))

# Applying k-Fold Cross Validation
from sklearn.model_selection import cross_val_score
accuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)
print("SVM Accuracy: %0.3f (+/- %0.3f)" % (accuracies.mean(), accuracies.std() * 2))

filename = 'LogisticRegression.pkl'
outfile = open(filename,'wb')

pickle.dump(LogisticRegression,outfile)
outfile.close()

# Analyzing Coefficients
pd.concat([pd.DataFrame(X_train.columns, columns = ["features"]),
           pd.DataFrame(np.transpose(classifier.coef_), columns = ["coef"])
           ],axis = 1)

!pip install pycaret

from pycaret.utils import enable_colab
enable_colab()

dataset=pd.read_csv('new_churn_data.csv' ,)

dataset = dataset.drop(columns = ['user'])

data = dataset.sample(frac=0.95, random_state=786).reset_index(drop=True)
data_unseen = dataset.drop(data.index).reset_index(drop=True)

print('Data for Modeling: ' + str(data.shape))
print('Unseen Data For Predictions: ' + str(data_unseen.shape))

from pycaret.classification import *

exp_clf101 = setup(data = data, target = 'churn', session_id=123)

compare_models()

catboost = create_model('catboost')

lightgbm = create_model('lightgbm')

gbc = create_model('gbc')

tuned_catboost = tune_model('catboost')

tuned_lightgbm = tune_model('lightgbm')

tuned_gbc = tune_model('gbc')

"""**AUC Plot**"""

interpret_model(tuned_catboost, plot = 'reason')#'summary', 'correlation' or 'reason'

plot_model(tuned_lightgbm, plot = 'auc')

plot_model(tuned_gbc, plot = 'auc')

"""**Precision-Recall Curve**"""

interpret_model(tuned_catboost, plot = 'summary')

plot_model(tuned_lightgbm, plot = 'pr')

plot_model(tuned_gbc, plot = 'pr')

"""**Feature Importance Plot**"""

plot_model(tuned_lightgbm, plot='feature')

plot_model(tuned_gbc, plot='feature')

"""**Confusion Matrix**"""

interpret_model(tuned_catboost, plot = 'correlation')

plot_model(tuned_lightgbm, plot = 'confusion_matrix')

plot_model(tuned_gbc, plot = 'confusion_matrix')

interpret_model(tuned_catboost)

evaluate_model(tuned_lightgbm)

evaluate_model(tuned_gbc)

"""**Predict on test / hold-out Sample**"""

predict_model(tuned_catboost);

predict_model(tuned_lightgbm);

predict_model(tuned_gbc);

"""**Finalize Model for Deployment**"""

final_catboost = finalize_model(tuned_catboost)

final_lightgbm = finalize_model(tuned_lightgbm)

final_gbc = finalize_model(tuned_gbc)

#Final Cat Boost Classifier model parameters for deployment
print(final_catboost)

#Final Light Gradient Boosting model parameters for deployment
print(final_lightgbm)

#Final Gaussian Process model parameters for deployment
print(final_gbc)

predict_model(final_catboost);

predict_model(final_lightgbm);

predict_model(final_gbc);

"""**Predict on unseen data**"""

unseen_predictions = predict_model(final_catboost, data=data_unseen)
unseen_predictions.head()

unseen_predictions = predict_model(final_lightgbm, data=data_unseen)
unseen_predictions.head()

unseen_predictions = predict_model(final_gbc, data=data_unseen)
unseen_predictions.head()

filename = 'Gaussian.pkl'
outfile = open(filename,'wb')

pickle.dump(final_gbc,outfile)
outfile.close()

filename = 'Light_Gradient_Boosting.pkl'
outfile = open(filename,'wb')

pickle.dump(final_lightgbm,outfile)
outfile.close()

filename = 'Cat_Boost_Classifier.pkl'
outfile = open(filename,'wb')

pickle.dump(final_catboost,outfile)
outfile.close()

"""**Saving the model**"""

save_model(final_gbc,'Final Gaussian Model 09APR2020')

save_model(final_lightgbm,'Final Light Gradient Boosting Model 09APR2020')

save_model(final_catboost,'Final Cat Boost Classifier Model 09APR2020')

"""**Loading the saved model**"""

saved_final_lightgbm = load_model('Final Light Gradient Boosting Model 09APR2020')

new_prediction = predict_model(saved_final_lightgbm, data=data_unseen)

new_prediction.head()

data_unseen.head()

data_unseen.columns

